{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import psutil\n",
    "import multiprocessing as mp\n",
    "from GPy.kern import Matern32, Matern52, RBF\n",
    "from time import time\n",
    "from scipy.spatial.distance import euclidean\n",
    "from scipy.optimize import least_squares"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Old Impli"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "class NottDunsOld(object):\n",
    "    \"\"\"\n",
    "    A class to learn Nott and Dunsmuir's non-stationary kernel. For more information, refer to\n",
    "    https://academic.oup.com/biomet/article-abstract/89/4/819/242307\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    X : np.ndarray, shape (n_samples, n_features)\n",
    "        Feature vectors\n",
    "        n_samples: Number of locations in context of placement or samples\n",
    "        n_features: Number of co-ordinates or features\n",
    "    \n",
    "    Gamma : np.ndarray, shape (n_locations, n_locations)\n",
    "        Estimation of Emprical Covariance Matrix. \n",
    "        --> One way to calculate it is given at,\n",
    "        http://math.mit.edu/~liewang/ECM.pdf\n",
    "        --> It can be fitted with scikit-learn library as well,\n",
    "        https://scikit-learn.org/stable/modules/generated/sklearn.covariance.EmpiricalCovariance.html#sklearn.covariance.EmpiricalCovariance\n",
    "            \n",
    "    N : integer (Default is 10)\n",
    "        Number of nearby points to learn each kernel locally\n",
    "    \n",
    "    eta : intenger (Default is 10)\n",
    "        A hyperparameter used in weight function\n",
    "        \n",
    "    loc_kernel : str, (Default is 'm32') ('m32', 'm52' or 'rbf')\n",
    "        type of kernel to be used\n",
    "        \n",
    "    kern_lib : str, (Default is 'GPy') ('sklearn', 'GPy')\n",
    "        library to use for local kernel selection\n",
    "    \n",
    "    \"\"\"\n",
    "    def __init__(s, X, y, Gamma, N=10, eta=10, loc_kernel='m32', kern_lib='GPy'):\n",
    "        s.X = X # training fetures\n",
    "        s.y = y # Training values\n",
    "        s.Gamma = Gamma # Empirical Covariance Matrix\n",
    "        s.N = N + 1 # Number of datapoints for local kerne\n",
    "        s.eta = eta # Eta parameter\n",
    "        s.kernel = loc_kernel # Local stationary kernel\n",
    "        s.lib = kern_lib\n",
    "        s.v_dict = {}\n",
    "        s.c_dict = {}\n",
    "        s.KX_inv = None\n",
    "        \n",
    "        # Initial calculations\n",
    "        s.close_locs = s._get_close_locs() # Get closest N locations for each train location\n",
    "        s._learnLocal() # Learning local kernels\n",
    "        \n",
    "    def __calculate_dmat(s):\n",
    "        s.dmat = np.zeros((s.X.shape[0],s.X.shape[0]))\n",
    "        for i in range(s.X.shape[0]):\n",
    "            for j in range(i, s.X.shape[0]):\n",
    "                s.dmat[i, j] = np.linalg.norm(s.X[i] - s.X[j])\n",
    "                s.dmat[j, i] = s.dmat[i, j]\n",
    "    \n",
    "    def _get_close_locs(s):\n",
    "        s.__calculate_dmat() # Distance matrix\n",
    "        return [s.dmat[i].argsort()[:s.N] for i in range(s.X.shape[0])]\n",
    "    \n",
    "    def _weight_func(s, S):\n",
    "#         return np.exp(-(1/s.eta) * ((S - s.X)**2).sum(axis=1))\n",
    "        return np.array([np.exp(-(1/s.eta) * euclidean(S, ii)**2) for ii in s.X])\n",
    "    \n",
    "    def _model(s, loc):\n",
    "        def __D_z(sj):\n",
    "            pj = s.Gamma[sj, sj]\n",
    "            return sum(np.meshgrid(pj, pj)) - 2 * s.Gamma[np.ix_(sj, sj)]\n",
    "            \n",
    "        if s.lib == 'GPy':\n",
    "            def _obfunc(x):\n",
    "                kern = kern_dict[s.kernel]\n",
    "                kern.variance = x[0]\n",
    "                kern.lengthscale = x[1]\n",
    "                kernel = kern.K\n",
    "                vario = kernel(s.X[s.close_locs[loc]])\n",
    "                term = (__D_z(s.close_locs[loc]) - vario)/vario\n",
    "                return np.sum(term**2)\n",
    "            \n",
    "            kern_dict = {'m32': Matern32(input_dim=s.X.shape[1], active_dims=list(range(s.X.shape[1]))), \n",
    "                     'm52': Matern52(input_dim=s.X.shape[1], active_dims=list(range(s.X.shape[1]))), \n",
    "                     'rbf': RBF(input_dim=s.X.shape[1], active_dims=list(range(s.X.shape[1])))}\n",
    "            \n",
    "            var, ls = least_squares(_obfunc, [1, 1]).x\n",
    "#             func = grad(_obfunc, argnum=(0, 1))\n",
    "#             var = 1.0\n",
    "#             ls = 1.0\n",
    "#             for i in range(100):\n",
    "#                 g_var, g_ls = func(var, ls)\n",
    "#                 print(g_var, g_ls)\n",
    "#                 var = var - 0.01 * g_var\n",
    "#                 ls = ls - 0.01 * g_ls\n",
    "            kernel = kern_dict[s.kernel]\n",
    "            kernel.variance = var\n",
    "            kernel.lengthscale = ls\n",
    "            \n",
    "            return kernel.K\n",
    "        \n",
    "        elif s.lib == 'sklearn':\n",
    "            sys.exit()\n",
    "#             ##########################################\n",
    "#             # Need to fix matern kernel variance\n",
    "#             #########################################\n",
    "#             def _obfunc(x):\n",
    "#                 variance = x[0]\n",
    "#                 kernel = Matern(x[1])\n",
    "#                 #kernel.lengthscale = x2\n",
    "#                 lst = [(__D_z(sj_i, sk_i) - \\\n",
    "#                         kernel(s.X[sj_i].reshape(-1,s.X.shape[1]), s.X[sk_i].reshape(-1,s.X.shape[1])))\\\n",
    "#                        /kernel(s.X[sj_i].reshape(-1,s.X.shape[1]), s.X[sk_i].reshape(-1,s.X.shape[1]))\\\n",
    "#                        for sj_i, sk_i in combinations(s.close_locs[loc], 2)]\n",
    "#                 return np.sum(np.array(lst)**2)\n",
    "            \n",
    "#             kern_dict = {'m32': Matern(nu=1.5), \n",
    "#                      'm52': Matern(nu=2.5), \n",
    "#                      'rbf': sk_RBF()}\n",
    "#             kernel = kern_dict[s.kernel]\n",
    "#             var, ls = least_squares(_obfunc, [1, 1]).x\n",
    "#             func = grad(_obfunc, argnum=(0, 1))\n",
    "#             var, ls = 1., 1.\n",
    "#             for i in range(100):\n",
    "#                 g_var, g_ls = func(var, ls)\n",
    "#                 var = var - 0.01 * g_var\n",
    "#                 ls = ls - 0.01 * g_ls\n",
    "#             kernel.legnthscale = ls\n",
    "#             print(ls, var)\n",
    "#             return lambda *x: var * kernel(*x)\n",
    "#         else:\n",
    "#             raise TypeError(\"use lib argument from the following list: ['GPy', 'sklearn']\")\n",
    "\n",
    "    def c_inv(s, xx):\n",
    "        return np.linalg.pinv(xx(s.X))\n",
    "        \n",
    "    def _learnLocal(s):\n",
    "        print('Training local GPs. This may take a few moments')\n",
    "        \n",
    "        job = mp.Pool(psutil.cpu_count())\n",
    "        s.kernels = job.map(s._model, list(range(s.X.shape[0])))\n",
    "#         s.kernels = [s._model(i) for i in range(s.X.shape[0])]    \n",
    "        s.C_inv = job.map(s.c_inv, s.kernels)\n",
    "        job.close()\n",
    "        \n",
    "        print('Training complete')\n",
    "    \n",
    "    def __weight_func(s, x1, x2):\n",
    "        return np.exp(-(1/s.eta) * euclidean(x1, x2)**2)\n",
    "   \n",
    "    def _v(s, S, i):\n",
    "        return s.w[repr((S, i))] /\\\n",
    "                np.sum([s.w[repr((S, ii))] for ii in range(s.X.shape[0])])\n",
    "    \n",
    "    def _R_hat(s, SS):\n",
    "        S1 = SS[0]\n",
    "        S2 = SS[1]\n",
    "        cov_value1 = 0\n",
    "        for i in range(s.X.shape[0]):\n",
    "            for j in range(s.X.shape[0]):\n",
    "                if not repr([S1, i]) in s.v_dict:\n",
    "                    s.v_dict[repr([S1, i])] = s._v(S1, i)\n",
    "                if not repr([S2, j]) in s.v_dict:\n",
    "                    s.v_dict[repr([S2, j])] = s._v(S2, j)\n",
    "                if not repr([S1, i]) in s.c_dict:\n",
    "                    s.c_dict[repr([S1, i])] = s.kernels[i](S1.reshape(1,-1), s.X)\n",
    "                if not repr([S2, j]) in s.c_dict:\n",
    "                    s.c_dict[repr([S2, j])] = s.kernels[j](S2.reshape(1,-1), s.X)\n",
    "                tmp = s.v_dict[repr([S1, i])] *\\\n",
    "                                  s.v_dict[repr([S2, j])] *\\\n",
    "                                  s.c_dict[repr([S1, i])].reshape(1,-1).\\\n",
    "                                  dot(s.C_inv[i]).\\\n",
    "                                  dot(s.Gamma).\\\n",
    "                                  dot(s.C_inv[j]).\\\n",
    "                                  dot(s.c_dict[repr([S2, j])].reshape(-1,1)).squeeze()\n",
    "                cov_value1 += tmp\n",
    "#                 if i!=j:\n",
    "#                     print(s.v_dict[repr([S1, i])], s.v_dict[repr([S2, j])])\n",
    "#                     sys.exit()\n",
    "        \n",
    "        cov_value2 = 0   \n",
    "        for i in range(s.X.shape[0]):\n",
    "            cov_value2 += np.sqrt(s.v_dict[repr([S1, i])]) *\\\n",
    "                               np.sqrt(s.v_dict[repr([S2, i])]) *\\\n",
    "                               (s.kernels[i](S1.reshape(1,-1), S2.reshape(1,-1)) - s.c_dict[repr([S1, i])].reshape(1,-1).\\\n",
    "                                                                     dot(s.C_inv[i]).\\\n",
    "                                                                     dot(s.c_dict[repr([S2, i])].reshape(-1,1))\n",
    "                              ).squeeze()\n",
    "        return cov_value1 + cov_value2\n",
    "    \n",
    "    def Kern(s, S1, S2):\n",
    "        \"\"\"Covariance function\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        S1, S2 : np.ndarray, shape (n_locations, n_features)\n",
    "            S1, S2 are arrays passed to the function to get covariance matrix\n",
    "            n_locations : Number of locations\n",
    "            n_features : Number of co-ordinates\n",
    "        \n",
    "        \"\"\"\n",
    "        s.w = {}\n",
    "        for i in range(s.X.shape[0]):\n",
    "            for s1 in S1:\n",
    "                s.w[repr((s1, i))] = s.__weight_func(s1, s.X[i])\n",
    "            for s2 in S2:\n",
    "                s.w[repr((s2, i))] = s.__weight_func(s2, s.X[i])\n",
    "        ravel = []\n",
    "        job = mp.Pool(psutil.cpu_count())\n",
    "        for ii in range(len(S1)):\n",
    "            for jj in range(len(S2)):\n",
    "                ravel.append((S1[ii], S2[jj]))\n",
    "        #C_mat = job.map(s._R_hat, ravel)\n",
    "        C_mat = [s._R_hat(each) for each in ravel]\n",
    "        job.close()\n",
    "        return np.array(C_mat).reshape(S1.shape[0], S2.shape[0])\n",
    "    \n",
    "    def predict(s, X_test, return_cov=False):\n",
    "        if s.KX_inv is None:\n",
    "            s.KX_inv = np.linalg.pinv(s.Kern(s.X, s.X))\n",
    "        KX_test = s.Kern(X_test, s.X)\n",
    "        pred_mean = s.y.mean() + KX_test\\\n",
    "                                 .dot(s.KX_inv)\\\n",
    "                                 .dot(s.y - s.y.mean())\n",
    "        if return_cov:\n",
    "            pred_var = s.Kern(X_test, X_test) - KX_test.dot(s.KX_inv).dot(KX_test.T)\n",
    "            return (pred_mean, pred_cov)\n",
    "        return pred_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "class NottDuns(object):\n",
    "    \"\"\"\n",
    "    A class to learn Nott and Dunsmuir's non-stationary kernel. For more information, refer to\n",
    "    https://academic.oup.com/biomet/article-abstract/89/4/819/242307\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    X : np.ndarray, shape (n_samples, n_features)\n",
    "        Feature vectors\n",
    "        n_samples: Number of locations in context of placement or samples\n",
    "        n_features: Number of co-ordinates or features\n",
    "    \n",
    "    Gamma : np.ndarray, shape (n_locations, n_locations)\n",
    "        Estimation of Emprical Covariance Matrix. \n",
    "        --> One way to calculate it is given at,\n",
    "        http://math.mit.edu/~liewang/ECM.pdf\n",
    "        --> It can be fitted with scikit-learn library as well,\n",
    "        https://scikit-learn.org/stable/modules/generated/sklearn.covariance.EmpiricalCovariance.html#sklearn.covariance.EmpiricalCovariance\n",
    "            \n",
    "    N : integer (Default is 10)\n",
    "        Number of nearby points to learn each kernel locally\n",
    "    \n",
    "    eta : intenger (Default is 1)\n",
    "        A hyperparameter used in weight function\n",
    "        \n",
    "    loc_kernel : str, (Default is 'm32') ('m32', 'm52' or 'rbf')\n",
    "        type of kernel to be used\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(s, X, y, Gamma, N=10, eta=1, loc_kernel='m32'):\n",
    "        s.X = X # training fetures\n",
    "        s.y = y # Training values\n",
    "        s.Gamma = Gamma # Empirical Covariance Matrix\n",
    "        s.N = N + 1 # Number of datapoints for local kerne\n",
    "        s.eta = eta # Eta parameter\n",
    "        s.kernel = loc_kernel # Local stationary kernel\n",
    "        s.KX_inv = None\n",
    "        \n",
    "        # Initial calculations\n",
    "        s.close_locs = s._get_close_locs() # Get closest N locations for each train location\n",
    "        s._learnLocal() # Learning local kernels\n",
    "        \n",
    "    def __calculate_dmat(s):\n",
    "        s.dmat = np.zeros((s.X.shape[0],s.X.shape[0]))\n",
    "        for i in range(s.X.shape[0]):\n",
    "            for j in range(i, s.X.shape[0]):\n",
    "                s.dmat[i, j] = np.linalg.norm(s.X[i] - s.X[j])\n",
    "                s.dmat[j, i] = s.dmat[i, j]\n",
    "    \n",
    "    def _get_close_locs(s):\n",
    "        s.__calculate_dmat() # Distance matrix\n",
    "        return [s.dmat[i].argsort()[:s.N] for i in range(s.X.shape[0])]\n",
    "    \n",
    "    def _weight_func(s, S):\n",
    "        return np.exp(-(1/s.eta) * ((S - s.X)**2).sum(axis=1))\n",
    "    \n",
    "    def _model(s, loc):\n",
    "        def __D_z(sj):\n",
    "            pj = s.Gamma[sj, sj]\n",
    "            return sum(np.meshgrid(pj, pj)) - 2 * s.Gamma[np.ix_(sj, sj)]\n",
    "\n",
    "        def _obfunc(x):\n",
    "            kernel = kern_dict[s.kernel]\n",
    "            kernel.variance = x[0]\n",
    "            kernel.lengthscale = x[1]\n",
    "            kern_vals = kernel.K(s.X[s.close_locs[loc]])\n",
    "            term = (__D_z(s.close_locs[loc]) - kern_vals)/kern_vals\n",
    "            return np.sum(term**2)\n",
    "        \n",
    "        # ARD can be added\n",
    "        kern_dict = {'m32': Matern32(input_dim=s.X.shape[1], active_dims=list(range(s.X.shape[1]))), \n",
    "                 'm52': Matern52(input_dim=s.X.shape[1], active_dims=list(range(s.X.shape[1]))), \n",
    "                 'rbf': RBF(input_dim=s.X.shape[1], active_dims=list(range(s.X.shape[1])))}\n",
    "\n",
    "        kernel = kern_dict[s.kernel]\n",
    "        var, ls = least_squares(_obfunc, [1, 1]).x\n",
    "        kernel.variance = var\n",
    "        kernel.lengthscale = ls\n",
    "        return kernel.K\n",
    "          \n",
    "    def c_inv(s, xx):\n",
    "        return np.linalg.pinv(xx(s.X))\n",
    "        \n",
    "    def _learnLocal(s):\n",
    "        print('Training local GPs. This may take a few moments')\n",
    "        \n",
    "        job = mp.Pool(psutil.cpu_count())\n",
    "        s.kernels = job.map(s._model, list(range(s.X.shape[0]))) \n",
    "        s.C_inv = job.map(s.c_inv, s.kernels)\n",
    "        job.close()\n",
    "        \n",
    "        print('Training complete')\n",
    "    \n",
    "    def Kern(s, S1, S2=None):\n",
    "        \"\"\"Covariance function\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        S1, S2 : np.ndarray, shape (n_locations, n_dimentions)\n",
    "            S1, S2 are arrays passed to the function to get covariance matrix\n",
    "            n_locations : Number of locations\n",
    "            n_features : Number of co-ordinates\n",
    "        \n",
    "        \"\"\"\n",
    "        S2exists = True\n",
    "        if np.all(S1 == S2) or S2 is None:\n",
    "            S2exists = False\n",
    "            S2 = S1\n",
    "        \n",
    "        assert S1.shape[1] == s.X.shape[1]\n",
    "        assert S2.shape[1] == s.X.shape[1]\n",
    "        \n",
    "        # Calculating Weights & c_mats\n",
    "        s.v_s1 = np.zeros((S1.shape[0], s.X.shape[0]))\n",
    "        s.v_s2 = np.zeros((S2.shape[0], s.X.shape[0]))\n",
    "        s.c_mat_s1 = np.zeros((s.X.shape[0], S1.shape[0], s.X.shape[0]))\n",
    "        s.c_mat_s2 = np.zeros((s.X.shape[0], s.X.shape[0], S2.shape[0]))\n",
    "        s.c_mat_s1s2 = np.zeros((s.X.shape[0], S1.shape[0], S2.shape[0]))\n",
    "        \n",
    "        if S2exists:\n",
    "            for s1i, s1 in enumerate(S1):\n",
    "                s_vec = s._weight_func(s1)\n",
    "                s.v_s1[s1i, :] = s_vec/s_vec.sum()\n",
    "            for s2i, s2 in enumerate(S2):\n",
    "                s_vec = s._weight_func(s2)\n",
    "                s.v_s2[s2i, :] = s_vec/s_vec.sum()\n",
    "            for i in range(s.X.shape[0]):\n",
    "                s.c_mat_s1[i, :, :] = s.kernels[i](S1, s.X)\n",
    "                s.c_mat_s2[i, :, :] = s.kernels[i](s.X, S2)\n",
    "                s.c_mat_s1s2[i, :, :] = s.kernels[i](S1, S2)\n",
    "        else:\n",
    "            for s1i, s1 in enumerate(S1):\n",
    "                s_vec = s._weight_func(s1)\n",
    "                s.v_s1[s1i, :] = s_vec/s_vec.sum()\n",
    "            s.v_s2 = s.v_s1\n",
    "            for i in range(s.X.shape[0]):\n",
    "                s.c_mat_s1[i, :, :] = s.kernels[i](S1, s.X)\n",
    "                s.c_mat_s2[i, :, :] = s.c_mat_s1[i, :, :].T\n",
    "                s.c_mat_s1s2[i, :, :] = s.kernels[i](S1)\n",
    "        \n",
    "        # Calculating main covariance function\n",
    "        first_term = np.zeros((s.X.shape[0], s.X.shape[0], S1.shape[0], S2.shape[0]), dtype='float64')\n",
    "        for i in range(s.X.shape[0]):\n",
    "            for j in range(s.X.shape[0]):\n",
    "                first_term[i, j, :, :] = (s.c_mat_s1[i, :, :]\\\n",
    "                                         .dot(s.C_inv[i])\\\n",
    "                                         .dot(s.Gamma)\\\n",
    "                                         .dot(s.C_inv[j])\\\n",
    "                                         .dot(s.c_mat_s2[j, :, :]))*\\\n",
    "                                        (s.v_s1[:, i].reshape(-1, 1)\\\n",
    "                                         .dot(s.v_s2[:, j].reshape(1, -1)))\n",
    "            \n",
    "        second_term = np.zeros((s.X.shape[0], S1.shape[0], S2.shape[0]))\n",
    "        for i in range(s.X.shape[0]):\n",
    "            second_term[i, :, :] =  np.sqrt(s.v_s1[:, i].reshape(-1,1).dot(s.v_s2[:, i].reshape(1,-1))) *\\\n",
    "                               (s.c_mat_s1s2[i, :, :] - s.c_mat_s1[i, :, :].\\\n",
    "                                                                     dot(s.C_inv[i]).\\\n",
    "                                                                     dot(s.c_mat_s2[i, :, :]))\n",
    "        \n",
    "        return first_term.sum(axis=(0,1)) + second_term.sum(axis=0)\n",
    "    \n",
    "    def predict(s, X_test, return_cov=False):\n",
    "        if s.KX_inv is None:\n",
    "            s.KX_inv = np.linalg.pinv(s.Kern(s.X, s.X))\n",
    "        KX_test = s.Kern(X_test, s.X)\n",
    "        pred_mean = KX_test\\\n",
    "                                 .dot(s.KX_inv)\\\n",
    "                                 .dot(s.y - s.y.mean()) + s.y.mean()\n",
    "        if return_cov:\n",
    "            pred_var = s.Kern(X_test, X_test) - KX_test.dot(s.KX_inv).dot(KX_test.T)\n",
    "            return (pred_mean, pred_cov)\n",
    "        return pred_mean"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Small working example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(42)\n",
    "X = np.random.rand(20, 2) * 10\n",
    "y = np.random.rand(20, 10)\n",
    "Gamma = (y - y.mean(axis=1).reshape(20,1)).dot((y - y.mean(axis=1).reshape(20,1)).T)/y.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = NottDuns(X, y.mean(axis=1), Gamma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 3.29038284e-02  1.23257166e-05 -1.19759103e-02]\n",
      " [ 1.23257166e-05  6.37540727e-02  7.91142433e-03]\n",
      " [-1.19759103e-02  7.91142433e-03  4.35376172e-02]]\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'NottDuns' object has no attribute 'Kern'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-35-5e524b7ba117>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGamma\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mKern\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: 'NottDuns' object has no attribute 'Kern'"
     ]
    }
   ],
   "source": [
    "print(Gamma[:3,:3])\n",
    "print(model.Kern(X[:3,:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f93d8e11c10>]"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "vals = []\n",
    "for gap in np.arange(-10,11,0.5):\n",
    "    vals.append(np.abs(Gamma - model.Kern(X+gap, X)).mean())\n",
    "plt.grid(True)\n",
    "plt.plot(np.arange(-10,11,0.5), vals)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extra stuff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from NottDuns import NottDuns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = NottDuns(verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training local kernels. This may take a few moments\n",
      "Training complete\n"
     ]
    }
   ],
   "source": [
    "N = 50\n",
    "X = np.random.rand(N, 2) * 10\n",
    "y = np.random.rand(N, 10) * 20\n",
    "ECM = (y - y.mean(axis=1).reshape(N,1)).dot((y - y.mean(axis=1).reshape(N,1)).T)/y.shape[0]\n",
    "model.fit(X, y, ECM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 6.06410921  0.32576254 -0.351202  ]\n",
      " [ 0.32576254  3.2894377   3.5369839 ]\n",
      " [-0.351202    3.5369839  11.74301713]]\n",
      "[[ 6.06410921  0.32576254 -0.351202  ]\n",
      " [ 0.32576254  3.2894377   3.5369839 ]\n",
      " [-0.351202    3.5369839  11.74301713]]\n"
     ]
    }
   ],
   "source": [
    "# Verifying Kernel\n",
    "print(ECM[:3, :3])\n",
    "print(model.Kernel(X[:3]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " /home/patel_zeel/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: RuntimeWarning:invalid value encountered in log\n",
      " /home/patel_zeel/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: RuntimeWarning:divide by zero encountered in log\n",
      " /localroot/home/patel_zeel/polire-develop/polire/polire/placement/base.py:165: RuntimeWarning:divide by zero encountered in true_divide\n"
     ]
    }
   ],
   "source": [
    "P = 30\n",
    "np.random.seed(42)\n",
    "X_place = np.random.rand(N, 2)\n",
    "model.place(X_place, P, 'MI')\n",
    "MI = np.cumsum(0.5 * np.log(model.MI))\n",
    "rand = np.zeros((P, 100))\n",
    "for i in range(100):\n",
    "    model.place(X_place, P, 'Rand', random_state=i)\n",
    "    rand[:, i] = np.cumsum(0.5 * np.log(model.MI))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f82bc2f6710>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(MI, label='MI', linewidth=5)\n",
    "for each in range(100):\n",
    "    plt.plot(rand[:,each])\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
